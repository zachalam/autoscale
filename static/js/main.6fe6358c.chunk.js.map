{"version":3,"sources":["images/cpu.png","images/net.png","images/ram.png","helpers/scatter.js","components/ControlPanel.js","helpers/costs.js","components/CPU.js","components/NET.js","components/RAM.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ScatterJS","plugins","ScatterEOS","scatter","identity","eos","account","network","Network","fromJson","blockchain","host","port","protocol","chainId","rpc","JsonRpc","fullhost","helpers_scatter","init","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","connect","sent","console","error","abrupt","getIdentity","accounts","Api","log","stop","apply","this","arguments","logout","_ref2","_callee2","_context2","forgetIdentity","transfer","_ref3","_callee3","amt","completed","_context3","transact","actions","name","authorization","actor","permission","authority","data","from","to","quantity","concat","memo","blocksBehind","expireSeconds","t0","_x","_x2","ControlPanel","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","connection","depositLoading","depositAmt","openWallet","bind","assertThisInitialized","logoutScatter","transferTokens","setDepositAmt","depositCompleted","isOpen","setState","objectSpread","window","location","reload","e","target","value","react_default","createElement","Table","basic","Body","Row","Cell","Icon","style","cursor","onClick","Input","type","onChange","step","min","max","Button","loading","Modal","size","open","onClose","closeModal","Content","renderTable","Segment","Dimmer","active","inverted","Loader","Image","src","href","React","Component","require","fetch","gettablerows","table","resp","get_table_rows","json","code","scope","limit","rexCost","howMuchNeedToRent","rexpool","rows","total_unlent","total_rent","resourcesFor1EOS","split","objectHash","cpu","cpu_weight","cpu_limit","pp_cpu","pp_cpu_rent","get_account","total_resources","net","_ref4","_callee4","net_weight","net_limit","pp_net","pp_net_rent","_context4","ram","_ref5","_callee5","quote","base","pp_byte","pp_kb","_context5","balance","round","num","places","length","undefined","toFixed","CPU","prices","costs","Card","fluid","cpu_image","wrapped","ui","padding","Header","Description","extra","Placeholder","Paragraph","Line","NET","net_image","RAM","ram_image","App","openModal","preventDefault","className","components_ControlPanel","piled","Grid","textAlign","height","verticalAlign","container","columns","stackable","Column","components_CPU","components_NET","components_RAM","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fe6358c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cpu.593d32f1.png\";","module.exports = __webpack_public_path__ + \"static/media/net.453fd9e8.png\";","module.exports = __webpack_public_path__ + \"static/media/ram.63c78e1d.png\";","// Importing Scatter and eosjs.\nimport ScatterJS, { Network } from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs2';\nimport { Api, JsonRpc, RpcError, JsSignatureProvider } from 'eosjs';\n// Scatter comes without plugins, so we need to add the eosjs plugin.\nScatterJS.plugins(new ScatterEOS())\n\nconst network = Network.fromJson({\n    blockchain: 'eos',\n    host: 'nodes.get-scatter.com',\n    port: 443,\n    protocol: 'https',\n    chainId: 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906' // <-- this is the MAINNET\n});\n\nconst rpc = new JsonRpc(network.fullhost());\n\nlet scatter, identity, eos, account;\n\nlet init = async () => {\n    let connected = await ScatterJS.scatter.connect('Autoscale')\n    if(!connected){\n        // Either the user doesn't have Scatter, or it's closed.\n        console.error('Could not connect to Scatter.');\n        return;\n    }\n    \n    scatter = ScatterJS.scatter;\n    identity = await scatter.getIdentity({accounts:[network]});\n    eos = scatter.eos(network, Api, {rpc})\n    account = identity.accounts[0]\n\n    console.log(\"--\")\n    console.log(identity)\n\n    return { scatter, identity, eos, account }\n}\n\nlet logout = async() => {\n    await scatter.forgetIdentity();\n}\n\nlet transfer = async(amt,completed) => {\n    try {\n        const result = await eos.transact({\n            actions: [{\n                account: 'eosio.token',\n                name: 'transfer',\n                authorization: [{\n                    actor: account.name,\n                    permission: account.authority,\n                }],\n                data: {\n                    from: account.name,\n                    to: 'autoscale.x',\n                    quantity: `${amt} EOS`,\n                    memo: account.name,\n                },\n            }]\n        }, {\n            blocksBehind: 3,\n            expireSeconds: 30,\n        });\n        completed();\n    } catch (e) {\n        completed();\n    }\n}\n\nexport default { init, logout, transfer }\n\n","import React from 'react';\nimport { Input, Modal, Loader, Button, Table, Dimmer, Image, Segment, Icon } from 'semantic-ui-react'\n\nimport scatter from '../helpers/scatter'\n\nclass ControlPanel extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      connection: false,\n      depositLoading: false,\n      depositAmt: 1.0\n    }\n    this.openWallet = this.openWallet.bind(this)\n    this.logoutScatter = this.logoutScatter.bind(this)\n    this.transferTokens = this.transferTokens.bind(this)\n    this.setDepositAmt = this.setDepositAmt.bind(this)\n    this.depositCompleted = this.depositCompleted.bind(this)\n  }\n\n  async componentDidUpdate() {\n    if (this.props.isOpen) {\n      await this.openWallet()\n    }\n  }\n\n  async openWallet() {\n    let connection = await scatter.init()\n    console.log(\"connected\")\n    console.log(connection)\n    \n    if (!this.state.connection) {\n      this.setState({ ...this.state, connection })\n    }\n  }\n\n  logoutScatter() {\n    scatter.logout()\n    window.location.reload()\n  }\n\n  transferTokens() {\n    this.setState({depositLoading: true})   // turns on loader\n    // invokes scatter, 2nd param called to stop loader on button.\n    scatter.transfer(this.state.depositAmt, this.depositCompleted) \n  }\n\n  setDepositAmt(e) {\n    let depositAmt = e.target.value   // grab textinput val\n    this.setState({...this.state, depositAmt})    // save to state.\n  }\n\n  depositCompleted() {\n    // stops loading\n    this.setState({...this.state, depositLoading: false})\n  }\n\n  renderTable(connection) {\n    let account = connection.identity.accounts[0]\n    return (\n      <Table basic='very'>\n      \n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>Account</Table.Cell>\n          <Table.Cell>\n            <h2>\n            {account.name} &nbsp; \n            <Icon name=\"sign-out\" style={{cursor:'pointer'}} onClick={this.logoutScatter} />\n            </h2>\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Autoscale Balance</Table.Cell>\n          <Table.Cell><h3>0.00 EOS</h3></Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Deposit EOS</Table.Cell>\n          <Table.Cell>\n\n\n            <Input type=\"number\" name=\"quantity\" onChange={this.setDepositAmt} value={this.state.depositAmt} step=\"0.1\" min=\"0\" max=\"500\" /> \n            &nbsp; \n            <Button onClick={this.transferTokens} loading={this.state.depositLoading}>Deposit</Button>\n            <br />\n            You can also send EOS tokens to <b>autoscale.x</b>\n          </Table.Cell>\n        </Table.Row>\n      </Table.Body>\n  \n\n    </Table>\n    )\n  }\n\n  render() {\n    return (\n      <Modal size={'tiny'} open={this.props.isOpen} onClose={this.props.closeModal}>\n        <Modal.Content>\n          {this.state.connection ?     \n            this.renderTable(this.state.connection)\n          :\n            <div>\n              <Segment basic>\n                <Dimmer active inverted>\n                  <Loader inverted>Connecting...</Loader>\n                </Dimmer>\n                <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />\n              </Segment>\n              <a href=\"#\" onClick={this.openWallet}>Retry wallet</a>\n            </div>\n\n          }\n        </Modal.Content>\n      </Modal>\n    );\n  }\n}\n\nexport default ControlPanel;\n","const { JsonRpc } = require('eosjs');\nconst rpc = new JsonRpc('https://nodes.get-scatter.com', { fetch });\n\nlet gettablerows = async (table) => {\n    const resp = await rpc.get_table_rows({\n        json: true,              // Get the response as json\n        code: 'eosio',     // Contract that we target\n        scope: 'eosio',         // Account that owns the data\n        table: table,        // Table name\n        limit: 1               // Maximum number of rows that we want to get\n    });\n\n    return resp\n}\n\nlet rexCost =  async(howMuchNeedToRent) => {\n    // calculate how much it costs to rent\n    let rexpool = await gettablerows('rexpool')\n    let { rows } = rexpool\n    rows = rows[0]      // grab first row\n\n    // how much EOS staked you get from spending 1 EOS.\n    const total_unlent = rows.total_unlent.split(\" \")[0]\n    const total_rent = rows.total_rent.split(\" \")[0]\n    let resourcesFor1EOS = total_unlent / (total_rent + 1)\n\n    return howMuchNeedToRent / resourcesFor1EOS\n}\n\nlet cpu = async () => {\n    let resp = await rpc.get_account('cypherglasss')\n\n    const cpu_weight = resp.total_resources.cpu_weight.split(\" \")[0]\n    const cpu_limit = resp.cpu_limit.max\n    const cpu_avail = cpu_limit / 1000\n    const pp_cpu = cpu_weight / cpu_avail\n\n    // get rex (renatl) cost. (x1000 because in batches of 1000ms)\n    const pp_cpu_rent = await rexCost(pp_cpu*1000)\n\n    return { pp_cpu, pp_cpu_rent }\n}\n\nlet net = async () => {\n    let resp = await rpc.get_account('cypherglasss')\n\n    const net_weight = resp.total_resources.net_weight.split(\" \")[0]\n    const net_limit = resp.net_limit.max\n    const net_avail = net_limit / 1024\n    const pp_net = net_weight / net_avail\n\n    // get rex (renatl) cost. (x1000 because in batches of 1000ms)\n    const pp_net_rent = await rexCost(pp_net*1000)\n\n    \n    return { pp_net, pp_net_rent }\n}\n\nlet ram = async () => {\n    let resp = await gettablerows('rammarket')\n    let { rows } = resp\n    rows = rows[0]      // grab first row\n\n    // price per byte..\n    const quote = rows.quote.balance.split(\" \")[0]\n    const base = rows.base.balance.split(\" \")[0]\n    let pp_byte =  quote / base\n    let pp_kb = pp_byte * 1024\n    return {pp_byte, pp_kb}\n}\n\nlet round = (num,places=4) => {\n    if(!num) return num\n    return num.toFixed(places)\n}\n\nlet objectHash = {\n    cpu,\n    net,\n    ram,\n    round\n}\n\nexport default objectHash;","import React from 'react';\nimport { Card, Image, Placeholder } from 'semantic-ui-react'\nimport cpu_image from '../images/cpu.png'\nimport costs from '../helpers/costs'\n\nclass CPU extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            prices: false\n        }\n    }\n\n    async componentDidMount() {\n        let prices = await costs.cpu()\n        this.setState({ prices })\n    }\n\n    render() {\n        return (\n\n            <Card fluid>\n                <Image src={cpu_image} wrapped ui={false} style={{ 'padding': '2em' }} />\n                <Card.Content>\n                    <Card.Header>CPU</Card.Header>\n                    <Card.Description>\n                        Amount of time the network can spend processing your transactions.\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    {this.state.prices ?\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td>30-day Cost:</td>\n                                    <td><h3>{costs.round(this.state.prices.pp_cpu_rent, 6)} EOS</h3></td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td>for 1.0s CPU Daily</td>\n                                </tr>\n                                <tr>\n                                    <td>Source:</td>\n                                    <td>eosio.rexpool</td>\n                                </tr>\n                                <tr>\n                                    <td>Stake Basis:</td>\n                                    <td>1ms / {costs.round(this.state.prices.pp_cpu, 4)} EOS</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        :\n                        <Placeholder>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    }\n                </Card.Content>\n            </Card>\n\n        );\n    }\n}\n\nexport default CPU;\n","import React from 'react';\nimport { Card, Image, Placeholder } from 'semantic-ui-react'\nimport net_image from '../images/net.png'\nimport costs from '../helpers/costs'\n\nclass NET extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            prices: false\n        }\n    }\n\n    async componentDidMount() {\n        let prices = await costs.net()\n        this.setState({ prices })\n    }\n\n    render() {\n        return (\n\n            <Card fluid>\n                <Image src={net_image} wrapped ui={false} style={{ 'padding': '2em' }} />\n                <Card.Content>\n                    <Card.Header>NET</Card.Header>\n                    <Card.Description>\n                        Amount of data the network can transfer during your transactions.\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    {this.state.prices ?\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td>30-day Cost:</td>\n                                    <td><h3>{costs.round(this.state.prices.pp_net_rent, 6)} EOS</h3></td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td>for 1mb NET Daily</td>\n                                </tr>\n                                <tr>\n                                    <td>Source:</td>\n                                    <td>eosio.rexpool</td>\n                                </tr>\n                                <tr>\n                                    <td>Stake Basis:</td>\n                                    <td>1kb / {costs.round(this.state.prices.pp_net, 4)} EOS</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        :\n                        <Placeholder>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    }\n                </Card.Content>\n            </Card>\n\n        );\n    }\n}\n\nexport default NET;\n","import React from 'react';\nimport { Card, Image, Placeholder } from 'semantic-ui-react'\nimport ram_image from '../images/ram.png'\nimport costs from '../helpers/costs'\n\nclass RAM extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            prices: false\n        }\n    }\n\n    async componentDidMount() {\n        let prices = await costs.ram()\n        this.setState({ prices })\n    }\n\n    render() {\n        return (\n\n            <Card fluid>\n                <Image src={ram_image} wrapped ui={false} style={{ 'padding': '2em' }} />\n                <Card.Content>\n                    <Card.Header>RAM</Card.Header>\n                    <Card.Description>\n                        Storage for application data and smart contracts on the blockchain.\n              </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    {this.state.prices ?\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td>Exchange:</td>\n                                    <td><h3>1kb = {costs.round(this.state.prices.pp_kb, 4)} EOS</h3></td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td>{costs.round(this.state.prices.pp_byte, 8)} / byte</td>\n                                </tr>\n                                <tr>\n                                    <td>Source:</td>\n                                    <td>eosio.rammarket</td>\n                                </tr>\n                                <tr>\n                                    <td>Unit Type:</td>\n                                    <td>bytes</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        :\n                        <Placeholder>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    }\n                </Card.Content>\n            </Card>\n\n        );\n    }\n}\n\nexport default RAM;\n","import React from 'react';\nimport { Button, Grid, Segment } from 'semantic-ui-react'\nimport './index.css'\n\nimport ControlPanel from './components/ControlPanel'\nimport CPUCard from './components/CPU'\nimport NETCard from './components/NET'\nimport RAMCard from './components/RAM'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isOpen: false\n    }\n    this.closeModal = this.closeModal.bind(this)\n    this.openModal = this.openModal.bind(this)\n  }\n\n  closeModal(e) {\n    if(e) e.preventDefault()\n    this.setState({isOpen: false})\n  }\n\n  openModal(e) {\n    if(e) e.preventDefault()\n    this.setState({isOpen: true})\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <ControlPanel\n          isOpen={this.state.isOpen}\n          closeModal={this.closeModal}\n        />\n\n        <Segment piled>\n          <h2>\n            Autoscale - Automatic EOS Scaling &nbsp; \n            <Button className={'bgColor'} onClick={this.openModal}>Control Panel</Button>\n          </h2>\n        </Segment>\n\n        <Grid textAlign='center' style={{ height: '80vh' }} verticalAlign='middle'>\n          <Grid container columns={3} stackable>\n            <Grid.Column textAlign='center'>\n              <CPUCard />\n            </Grid.Column>\n            <Grid.Column>\n              <NETCard />\n            </Grid.Column>\n            <Grid.Column>\n              <RAMCard />\n            </Grid.Column>\n          </Grid>\n        </Grid>\n\n        * Deposit EOS and Autoscale will automatically buy account resources when they're needed.\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}